#!/usr/bin/env node

var fs = require('fs');
var program = require('commander');
var open = require('open');
var path = require('path');
var readline = require('readline');
var spec = require('./../package.json');
var google = require('./../lib/google');

program.version(spec.version);

program
  .command('create')
  .description('Create a new project')
  .action(function() {
    console.log('Creating project with Google...');
    console.log('Give it a name in Script Editor');
    google.create(function(err, project) {
      open(google.scriptEditorUrl(project))
    });
  });

program
  .command('list')
  .description('List projects in your Drive account')
  .action(function() {
    google.list(function(projects) {
      projects.forEach(function(p) {
        console.log(p.title);
      });
    });
  });

program
  .command('open <projectName>')
  .description('Open project in Google Script Editor')
  .action(function(projectName) {
    google.info(projectName, function(err, project) {
      open(google.scriptEditorUrl(project))
    });
  })

program
  .command('download <projectName>')
  .description('Download project')
  .action(function(projectName) {
    google.download(projectName, function(err, project) {
      project.files.forEach(function(file) {
        var fname = file.name + google.scriptExtensionForType(file.type);
        fs.writeFile(fname, file.source, function(err) {
          if (err) {
            console.error(err);
            process.exit(1);
          }
          console.log('Wrote ' + fname);
        });
      });
    });
  });

program
  .command('push <projectName>')
  .description('Push project code')
  .action(function(projectName) {
    var files = []
    fs.readdirSync('.').forEach(function(file) {
      var ext = path.extname(file);
      var type = google.scriptTypeForExtension(ext);

      if (type) {
        files.push({
          name: path.basename(file, ext),
          type: type,
          source: fs.readFileSync(file, 'utf8')
        });
      }
    });

    google.push(projectName, files, function(err, res) {
      if (err) {
        console.error(err)
        process.exit(1);
      }
    })
  });

program
  .command('auth')
  .description('Authenticate with Google')
  .action(function() {
    console.log('Temporary/hacky auth using the Oauth Playground');
    console.log('Open: https://developers.google.com/oauthplayground/');
    console.log('Add the custom scope: https://www.googleapis.com/auth/drive.scripts https://www.googleapis.com/auth/drive');
    console.log('Click Exchange authorization code for tokens');
    console.log('Paste the access token below:');

    var rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
      terminal: false
    });

    rl.on('line', function(token) {
      console.log('token is: ' + token);
      fs.writeFile(process.env.HOME + '/.gs-tamer', token, function(err) {
        if (err) {
          console.error(err)
        }
        rl.close();
      });
    });
  });

program.on('*', function(command) {
  console.error('Command `%s` unrecognized', command[0]);
  program.outputHelp();
  process.exit(1);
});

program.parse(process.argv);

if (program.rawArgs.length < 3) {
  program.outputHelp();
}
